
Steps:

1. After putting the decorator above the function:

	@profile 
	def myfunction_to_profile(a, b, c):


2. Run kernprof on your script.  This will generate a "script_name.py.lprof" file

   kernprof.py -l matmult.py

3. Finally to see the results, runt this line on your generated "lprof" file: 

   python3  -m line_profiler matmult.py.lprof

4, For example, here are the results of profiling a single function from a decorated 
version of the pystone.py benchmark (the first two lines are output from pystone.py, not kernprof):

> Pystone(1.1) time for 50000 passes = 2.48
> This machine benchmarks at 20161.3 pystones/second
> Wrote profile results to pystone.py.lprof
> Timer unit: 1e-06 s
> 
> File: pystone.py
> Function: Proc2 at line 149
> Total time: 0.606656 s
> 
> Line #      Hits         Time  Per Hit   % Time  Line Contents
> ==============================================================
>    149                                           @profile
>    150                                           def Proc2(IntParIO):
>    151     50000        82003      1.6     13.5      IntLoc = IntParIO + 10
>    152     50000        63162      1.3     10.4      while 1:
>    153     50000        69065      1.4     11.4          if Char1Glob == 'A':
>    154     50000        66354      1.3     10.9              IntLoc = IntLoc - 1
>    155     50000        67263      1.3     11.1              IntParIO = IntLoc - IntGlob
>    156     50000        65494      1.3     10.8              EnumLoc = Ident1
>    157     50000        68001      1.4     11.2          if EnumLoc == Ident1:
>    158     50000        63739      1.3     10.5              break
>    159     50000        61575      1.2     10.1      return IntParIO

The source code of the function is printed with the timing information for each line. There are six columns of information.

- Line #: The line number in the file.
- Hits: The number of times that line was executed.
- Time: The total amount of time spent executing the line in the timer's units. 
In the header information before the tables, you will see a line "Timer unit:" giving the conversion factor to seconds. 
It may be different on different systems.
- Per Hit: The average amount of time spent executing the line once in the timer's units.
- % Time: The percentage of time spent on that line relative to the total amount of recorded time spent in the function.
- Line Contents: The actual source code. Note that this is always read from disk when the formatted results are viewed, 
not when the code was executed. If you have edited the file in the meantime, the lines will not match up, 
and the formatter may not even be able to locate the function for display.


 
